// 미리 구성해놓은 task묶음 빌드 과정에 필요한 기본정보를 포함한다
plugins {
    // Spring Boot Gradle 플러그인으로 사용하면 Spring Boot 종속성을 관리하고 Gradle을
    // 빌드 도구로 사용할 때 애플리케이션을 패키징하고 실행할 수 있음
    // 단독으로 사용되는 경우 프로젝트에 거의 영향을 주지 않음
    // 예를 들어 java 플러그인과 함께 적용되면 실행 가능한 jar 빌드 작업이 자동구성
    // spring-boot-dependencies를 통해서 의존성 관리 기능을 제공하기도 함
    id 'org.springframework.boot' version '3.0.0'
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

// 각종 의존성을 받아올 원격 저장소
repositories {
    mavenCentral()
}

// bootJar 즉, 실행 가능한 jar을 생성하려고 시도하기 때문에 main() 메서드가 필요함
// Root 프로젝트는 main 없이 라이브러리의 역할을 하는 모듈이기에 false로 비활성
bootJar.enabled = false

// settings.gradle에 include된 프로젝트 전부에 대한 공통사항 명시 (root는 제외)
// subprojects 블록 안에는 plugins 블록을 사용할 수 없으므로 apply plugin을 사용
subprojects {
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    apply plugin: 'java'
    // build.gradle에서 api()를 사용하려면 java-library 사용
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    // spring boot dependency를 사용하여 사용중인 부트 버전에서 자동으로 의존성을 가져온다.
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    // 관리하는 모듈에 공통 dependencies
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}