/*
core 모듈의 경우 main 메서드 없이 라이브러리 역할을 하는 모듈이므로 BootJar이 아닌 jar파일로 생성되고 다른 프로젝트에 첨부됨
따라서 bootJar은 false, jar는 true로 설정
*/
bootJar.enabled = false
jar.enabled = true

/*
implementation vs api
api는 compile이 deprecated되고 대체된 방식
implementation은 하위 의존에 대한 접근을 제한하고 api는 공개함

// A Module
public class A
// B Module
api project(':A')
// C Module
implementation project(':B')

public class C{
    public void act(){
        new A() // compile error
    }
}

C Module에서 implementation을 사용해서 B를 사용했기 때문에 B에서 제공하는 기능만 사용
가능하고 B모듈에서 가져온 다른 의존성에 대해서는 접근할 수 없음
C -> B -> A에서 B까지만 접근할 수 있다는 의미
그래서 보통 개발할 때 domain 모듈 계층을 최종으로 조합하여 사용하는 어플리케이션 모듈
계층에서는 implementation을 사용하고, 그 외 계층에서는 api방식을 사용하여 개발
*/
dependencies {
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
}